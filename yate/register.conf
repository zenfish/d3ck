; http://yate.null.ro/pmwiki/index.php?n=Main.BuildYateJabberServer

 



[general]

user.auth=yes
user.register=yes
user.unregister=yes

; Global module settings that are read only at first initialization

; expires: int: Will execute the engine.timer query only every that many seconds
expires=60

; stoperror: regexp: disconnect errors for which fallback is disabled
stoperror=busy\|noanswer

; The following parameters enable handling of individual messages
; Each must be enabled manually in this config file

accounts=yes
fallback=yes

; user.auth: bool: Activate handler on the "user.auth" message
user.auth=yes

; user.register: bool: Activate handler on the "user.register" message
user.register=yes

; user.unregister: bool: Activate handler on the "user.unregister" message
user.unregister=yes

; engine.timer: bool: Activate handler on the "engine.timer" message
engine.timer=yes

; call.preroute: bool: Activate handler on the "call.preroute" message
call.preroute=no

; call.route: bool: Activate handler on the "call.route" message
call.route=yes

; call.cdr: bool: Activate handler on the "call.cdr" message
call.cdr=yes

; linetracker: bool: Activate line status tracking on "call.cdr"
;linetracker=no


[default]
priority=90
account=jabberserver

; This section holds default settings for each of the following message handlers
; All these settings can be overriden in individual handler sections

; priority: int: Priority in Yate's handlers chain
; priority=10

; account: string: Name of the database connection to use
; account=yateadmin

; In each of the following sections you have to specify the following:
; - initial query to execute when module is initialized
; - query to execute for each received message
; - result field to copy in message's textual return value (only for some)
; You can also override the settings from section [default]

; Sample queries below are for PostgreSQL
; Timestamps and intervals are unfortunately non-portable


[accounts]
; This  section is going to replace accfile

; message sent after receiving an engine.init
initquery=SELECT * from initaccounts() as t(enabled bool,protocol text,username text,description text,interval text,formats text,authname text,password text,server text,gatekeeper text,domain text,registrar text,outbound text,localaddress text,modified bool, account text,id int4,status text,number text, gw bool)

; message sent after receiving an engine.timer
timerquery=SELECT * from updateaccounts() as t(enabled bool,protocol text,username text,description text,interval text,formats text,authname text,password text,server text,gatekeeper text,domain text,registrar text,outbound text,localaddress text,modified bool, account text,id int4,status text, number text, gw bool)

; update status after user.notify

statusquery=UPDATE accounts SET status='${status}' WHERE account='${internalaccount}'


[fallback]
; This section is going to be enabled if fallback is desired


[user.auth]
; Query and result name for the user.auth message

query=SELECT password FROM users WHERE username='${username}'
result=password

;query=SELECT password FROM lines WHERE line='${username}'
result=password

[user.register]
; Query for the user.register message

query=SELECT * FROM register_set('${username}','${data}')

; query=UPDATE lines SET location='${data}',expires=CURRENT_TIMESTAMP + INTERVAL '${expires} s' WHERE line='${username}'

[user.unregister]
; Query for the user.unregister message

; query=UPDATE lines SET location=NULL,expires=NULL WHERE expires IS NOT NULL AND line='${username}'
query=DELETE FROM lines WHERE line='${username}' AND location='${data}'



[engine.timer]
; Query for the timer message that expires registrations
; Also look at the expires setting in section [general]

query=UPDATE lines SET location=NULL,expires=NULL WHERE expires IS NOT NULL AND expires<=CURRENT_TIMESTAMP


[call.preroute]
; Query and result name for the prerouting message

;query=

[call.route]
; Query and result name for the routing message

; offlineauto: boolean: Set the "offline" error for queries that return records but no route
;offlineauto=yes

query=SELECT * from getroute('${called}') as t(location text, called text, error text, line text)
result=location


[call.cdr]
; Queries for the CDR updating message

; critical: boolean: Reject all registrations and routing if query fails
critical=no

initquery=UPDATE cdr SET ended=true WHERE ended IS NULL OR NOT ended

cdr_initialize=INSERT INTO cdr VALUES(TIMESTAMP 'EPOCH' + INTERVAL '${time} s', '${chan}', '${address}', '${direction}', '${billid}', '${caller}', '${called}', INTERVAL '${duration} s', INTERVAL '${billtime} s', INTERVAL '${ringtime} s', '${status}', '${reason}', false)

cdr_update=UPDATE cdr SET address='${address}', direction='${direction}', billid='${billid}', caller='${caller}', called='${called}', duration=INTERVAL '${duration} s', billtime=INTERVAL '${billtime} s', ringtime=INTERVAL '${ringtime} s', status='${status}', reason='${reason}' WHERE chan='${chan}' AND time=TIMESTAMP 'EPOCH' + INTERVAL '${time} s'

cdr_finalize=UPDATE cdr SET address='${address}', direction='${direction}', billid='${billid}', caller='${caller}', called='${called}', duration=INTERVAL '${duration} s', billtime=INTERVAL '${billtime} s', ringtime=INTERVAL '${ringtime} s', status='${status}', reason='${reason}', ended=true WHERE chan='${chan}' AND time=TIMESTAMP 'EPOCH' + INTERVAL '${time} s'


[linetracker]
; Queries for the line usage tracker

; critical: boolean: Reject all registrations and routing if query fails
;critical=no

initquery=UPDATE lines SET inuse=0

cdr_initialize=UPDATE lines SET inuse=inuse+1 WHERE line='${external}'

cdr_finalize=UPDATE lines SET inuse=(CASE WHEN inuse>0 THEN inuse-1 ELSE 0 END) WHERE line='${external}'
